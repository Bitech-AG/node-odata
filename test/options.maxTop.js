var bookSchema, conn, odata, request, should, support;

should = require('should');

request = require('supertest');

odata = require('../.');

support = require('./support');

bookSchema = {
  title: String
};

conn = 'mongodb://localhost/odata-test';

describe('options.maxTop', function() {
  it('should work', function(done) {
    var PORT, server;
    PORT = 0;
    server = odata(conn);
    server.set('maxTop', 1);
    server.resource('book', bookSchema);
    return support(conn, function(books) {
      var s;
      return s = server.listen(PORT, function() {
        PORT = s.address().port;
        return request("http://localhost:" + PORT).get("/book?$top=10").end(function(err, res) {
          if (err) {
            return done(err);
          }
          res.body.value.length.should.be.equal(1);
          return done();
        });
      });
    });
  });
  describe('global-limit and query-limit', function() {
    it('should use global-limit if it is minimum', function(done) {
      var PORT, server;
      PORT = 0;
      server = odata(conn);
      server.set('maxTop', 1);
      server.resource('book', bookSchema);
      return support(conn, function(books) {
        var s;
        return s = server.listen(PORT, function() {
          PORT = s.address().port;
          return request("http://localhost:" + PORT).get("/book?$top=2").end(function(err, res) {
            if (err) {
              return done(err);
            }
            res.body.value.length.should.be.equal(1);
            return done();
          });
        });
      });
    });
    return it('should use query-limit if it is minimum', function(done) {
      var PORT, server;
      PORT = 0;
      server = odata(conn);
      server.set('maxTop', 2);
      server.resource('book', bookSchema);
      return support(conn, function(books) {
        var s;
        return s = server.listen(PORT, function() {
          PORT = s.address().port;
          return request("http://localhost:" + PORT).get("/book?$top=1").end(function(err, res) {
            if (err) {
              return done(err);
            }
            res.body.value.length.should.be.equal(1);
            return done();
          });
        });
      });
    });
  });
  return describe('query-limit and resource-limit', function() {
    it('should use global-limit if it is minimum', function(done) {
      var PORT, server;
      PORT = 0;
      server = odata(conn);
      server.resource('book', bookSchema).maxTop(2);
      return support(conn, function(books) {
        var s;
        return s = server.listen(PORT, function() {
          PORT = s.address().port;
          return request("http://localhost:" + PORT).get("/book?$top=1").end(function(err, res) {
            if (err) {
              return done(err);
            }
            res.body.value.length.should.be.equal(1);
            return done();
          });
        });
      });
    });
    return it('should use query-limit if it is minimum', function(done) {
      var PORT, server;
      PORT = 0;
      server = odata(conn);
      server.resource('book', bookSchema).maxTop(1);
      return support(conn, function(books) {
        var s;
        return s = server.listen(PORT, function() {
          PORT = s.address().port;
          return request("http://localhost:" + PORT).get("/book?$top=2").end(function(err, res) {
            if (err) {
              return done(err);
            }
            res.body.value.length.should.be.equal(1);
            return done();
          });
        });
      });
    });
  });
});

// ---
// generated by coffee-script 1.9.2
