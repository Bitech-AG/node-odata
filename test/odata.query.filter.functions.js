var PORT, bookSchema, books, odata, request, should, support;

should = require('should');

request = require('supertest');

odata = require('../.');

support = require('./support');

PORT = 0;

bookSchema = {
  author: String,
  description: String,
  genre: String,
  price: Number,
  publish_date: Date,
  title: String
};

books = void 0;

describe('odata.query.filter.functions', function() {
  before(function(done) {
    var conn, server;
    conn = 'mongodb://localhost/odata-test';
    server = odata(conn);
    server.resource('book', bookSchema);
    return support(conn, function(data) {
      var s;
      books = data;
      return s = server.listen(PORT, function() {
        PORT = s.address().port;
        return done();
      });
    });
  });
  describe('[contains]', function() {
    it('should filter items', function(done) {
      return request("http://localhost:" + PORT).get("/book?$filter=contains(title,'i')").expect(200).end(function(err, res) {
        if (err) {
          return done(err);
        }
        res.body.value.length.should.greaterThan(0);
        res.body.value.should.matchEach(function(item) {
          return item.title.indexOf('i') >= 1;
        });
        return done();
      });
    });
    return it('should filter items when it has extra spaces in query string', function(done) {
      return request("http://localhost:" + PORT).get("/book?$filter=contains(title,'Visual Studio')").expect(200).end(function(err, res) {
        if (err) {
          return done(err);
        }
        res.body.value.length.should.greaterThan(0);
        res.body.value.should.matchEach(function(item) {
          return item.title.indexOf('Visual Studio') >= 0;
        });
        return done();
      });
    });
  });
  describe('[indexof]', function() {
    it('should filter items', function(done) {
      return request("http://localhost:" + PORT).get("/book?$filter=indexof(title,'i') ge 1").expect(200).end(function(err, res) {
        if (err) {
          return done(err);
        }
        res.body.value.length.should.greaterThan(0);
        res.body.value.should.matchEach(function(item) {
          return item.title.indexOf('i') >= 1;
        });
        return done();
      });
    });
    return it('should filter items when it has extra spaces in query string', function(done) {
      return request("http://localhost:" + PORT).get("/book?$filter=indexof(title,'Visual Studio') ge 0").expect(200).end(function(err, res) {
        if (err) {
          return done(err);
        }
        res.body.value.length.should.greaterThan(0);
        res.body.value.should.matchEach(function(item) {
          return item.title.indexOf('Visual Studio') >= 0;
        });
        return done();
      });
    });
  });
  return describe('[year]', function() {
    return it('should filter items', function(done) {
      return request("http://localhost:" + PORT).get("/book?$filter=year(publish_date) eq 2000").expect(200).end(function(err, res) {
        if (err) {
          return done(err);
        }
        res.body.value.length.should.greaterThan(0);
        res.body.value.should.matchEach(function(item) {
          return new Date(item.publish_date).getFullYear() === 2000;
        });
        return done();
      });
    });
  });
});

// ---
// generated by coffee-script 1.9.2
