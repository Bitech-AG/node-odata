var PORT, bookSchema, books, odata, request, should, support;

should = require('should');

request = require('supertest');

odata = require('../.');

support = require('./support');

PORT = 0;

bookSchema = {
  author: String,
  description: String,
  genre: String,
  price: Number,
  publish_date: Date,
  title: String
};

books = void 0;

describe('rest.get', function() {
  before(function(done) {
    var conn, server;
    conn = 'mongodb://localhost/odata-test';
    server = odata(conn);
    server.resource('book', bookSchema);
    return support(conn, function(data) {
      var s;
      books = data;
      return s = server.listen(PORT, function() {
        PORT = s.address().port;
        return done();
      });
    });
  });
  it('should return all of the resources', function(done) {
    return request("http://localhost:" + PORT).get('/book').expect(200).end(function(err, res) {
      if (err) {
        return done(err);
      }
      res.body.should.be.have.property('value');
      res.body.value.length.should.be.equal(books.length);
      return done();
    });
  });
  it('should return special resource', function(done) {
    return request("http://localhost:" + PORT).get("/book(" + books[0].id + ")").expect(200).end(function(err, res) {
      if (err) {
        return done(err);
      }
      res.body.should.be.have.property('title');
      res.body.title.should.be.equal(books[0].title);
      return done();
    });
  });
  it('should be 404 if resouce name not declare', function(done) {
    return request("http://localhost:" + PORT).get("/not-exist-resource").expect(404, done);
  });
  return it('should be 404 if special resource not found', function(done) {
    return request("http://localhost:" + PORT).get("/book(00000)").expect(404, done);
  });
});

// ---
// generated by coffee-script 1.9.2
