var PORT, bookSchema, odata, request, should;

should = require('should');

request = require('supertest');

odata = require('../.');

PORT = 0;

bookSchema = {
  title: {
    type: String,
    unique: true
  }
};

describe('rest.post', function() {
  before(function(done) {
    var conn, s, server;
    conn = 'mongodb://localhost/odata-test';
    server = odata(conn);
    server.resource('book', bookSchema);
    return s = server.listen(PORT, function() {
      PORT = s.address().port;
      return done();
    });
  });
  it('should create new resource', function(done) {
    return request("http://localhost:" + PORT).post("/book").send({
      title: Math.random()
    }).expect(201).end(function(err, res) {
      if (err) {
        return done(err);
      }
      res.body.should.be.have.property('id');
      res.body.should.be.have.property('title');
      return done();
    });
  });
  it('should be 422 if post without data', function(done) {
    return request("http://localhost:" + PORT).post("/book").expect(422, done);
  });
  return it('should be 500 if same title already exist.', function(done) {
    var title;
    title = Math.random();
    return request("http://localhost:" + PORT).post("/book").send({
      title: title
    }).expect(201).end(function(err, res) {
      return request("http://localhost:" + PORT).post("/book").send({
        title: title
      }).expect(500).end(function(err, res) {
        if (err) {
          return done(err);
        }
        res.should.be.have.property('error');
        res.error.should.be.have.property('text');
        return done();
      });
    });
  });
});

// ---
// generated by coffee-script 1.9.2
